// Function to calculate the square of a float
square(x : Float) => Float {
	return x * x; // return the product of x and x
}

// Interface definition. It contains a single function signature "area" 
// which must be implemented by any struct that implements this interface
interface Areable {
	IType area() => Float; // area function should return a Float
}

// Struct Circle definition, it implements Areable interface
struct Circle : Areable {
	radius : Float = 4.0; // radius is a member variable of Circle, it is a Float and default value is 4.0
}

// Implementing the area function for struct Circle as required by Areable interface
// This function returns the area of the circle
Circle area() => Float {
	return 3.14 * square(caller.radius); // area = pi*r^2
}

// Struct Square definition, it does not explicitly implement any interface
struct Square {
	sideLength : Float; // sideLength is a member variable of Square, it is a Float
}

// Constructor for Square. It initializes the sideLength to 3.0
Square() => Square {
	sideLength = 3.0;
}

// Implementing the area function for struct Square. 
// This means that Square implicitly implements Areable interface
Square area() => Float {
	return square(caller.sideLength); // area = sideLength^2
}

// A function to calculate the volume of any struct that implements Areable interface
Areable volume(height: Float) => Float {
	return caller.area() * height; // volume = area * height
}

// The main function
main() => Void {
	myCircle : Circle = Circle(); // instantiate a Circle
	mySquare := Square(); // instantiate a Square

	h : Float = 2.0; // height for volume calculation

	circleVolume := myCircle.volume(h); // calculate volume of Circle
	squareVolume := mySquare.volume(h); // calculate volume of Square
	
	print("Circle Volume: " + circleVolume); // print Circle volume
	print("Square Volume: " + squareVolume); // print Square volume
	
	return; // return from main function
} 
