
print("");
print("");
print("");
print("Welcome to Zelt!");
// Welcome to Zelt!
// Zelt is a programming language and development environment
// that is designed to be easy to learn and use.
// It is primarliy designed for web game development.
// Zelt is currently in development and is not ready for use.
// This is a sample Zelt program that demonstrates the syntax of the language.
// Note to self: Need to add multi-line comments LOL

/*

/*
Nested multi-line comment test
*/

*/


// Variable declarations
print("Variable declarations");

print("Single variable declarations");

stringDec : String;
floatDec : Float;
intDec : Int;
boolDec : Bool;

// Multiple variable declarations with the same type
print("Multiple variable declarations with the same type");

str1, str2, str3 : String, ...;
int1, int2 : Int, ...;
fun1, fun2 : Int (Int) => Int, ...;

// Multiple variable declarations with different types
print("Multiple variable declarations with different types");

str1, int2, bool3 : String, Int, Bool;
int1, float2 : Int, Float;
fun1, fun2 : Int (Int) => Int, () => String;


// For now I'm only going to have Lists and Dictionaries
// Maybe I'll add Sets and Tuples later

// List declarations
print("List declarations");

intListDec : [Int];
stringListDec : [String];

// Function declarations -- Useful for interfaces??
print("Function declarations");

print("Without caller type");

// Without caller type
intFuncDec : (Int) => Int;
stringFuncDec : (Int, String) => Int, String;
listFuncDec : (Int, [String]) => [String], Int;

print("With caller type");

// With caller type
intFuncDec : Int (Int) => Int;
stringFuncDec : Bool (Int, String) => Int, String;
listFuncDec : List (Int, [String]) => [String], Int;


/* -- Types to be added -- Maybe --
// I'm not sure if I want to add these types yet
charDec : Char;
doubleDec : Double;
longDec : Long;
shortDec : Short;
byteDec : Byte;
uintDec : UInt;
ulongDec : ULong;
ushortDec : UShort;
ubyteDec : UByte;
*/

// Variable declarations with assignments
print("Variable declarations with assignments");

strD : String = "Logan";
intD : Int = 4;
floatD, boolD : Float, Bool = 4.9, false;

// Variable assignments these do not require the variable to be declared first
print("Variable declaration and assignment, type infered");

i := "Logan";
j := 4.9;
k, a := 23, false;

// Variable assignments these require the variable to be declared first
print("Variable assignments");

i = "Logan";
j = 4.9;
k, a = 23, false;


// Function calls
print("Function calls");

print("Without caller type");

// Without caller type

intFuncCall(4);
stringFuncCall(4, "Logan");
listFuncCall(4, ["Logan", "Larson"]);


// Function definitions
print("Function declarations");

print("Without caller type");

// Without caller type
intFuncDec(x : Int) => Int {
  return x * 2;
}
stringFuncDec(y : Int, z : String) => Int, String {
  return y, z;
}
listFuncDec(z : Int, x : [String]) => [String] {
	y := x;
	return y;
}
voidFuncDec(z : Int, x : Bool) => Void {
	return;
}
// Do I want named return values??
stringFuncDec(y : Int, z : String) => Int, String {
  return 0, "val";
}



print("DONE");

/* --- CURRENTLY NOT SUPPORTED ---

j = j * 3.2;

k = 24 + 1;

x : Int;

x = 0;

if x < 10 {
  print("x is less than 10");
} else {
  print("x is greater than or equal to 10");
}

while x < 10 {
  x = x + 1;
  print(x);
}

print("Exited loop");
*/
